15th July
=========

    -> Full Stack Courses

    -> Cloud / DevOps

    -> Data Analytics / DS / ML / AI / DE etc

    -> CORE PYTHON (30 Days)

        -> Full Stack Courses --> SQL, Django etc

        -> Cloud / DevOps     --> Boto3 (Python Framework)

        -> Data Analytics / DS / ML / AI / DE etc (Numpy, Pandas, etc )
    
    -> What is Python ?

        -> Object Oriented Programming Language (Interpreted)

        -> High Level Language

        -> Scripting Language

        -> etc

    -> Language ?

        -> Communication (Words, Writing, Speech, Gestures etc)  

            -> Regions(South India - North India - East Of India) (Culture)

                -> Hindi, Telugu etc
            
    -> Programming Language ?

        -> Machines cannot understand Languages like English, Hindi etc

        -> Machines know only Binary Language (011101111)

        -> User will Communicate with a computer using Programming Language

    ->  A programming paradigm is a relatively high-level way to conceptualize 
        and structure the implementation of a computer program. 
            -> Imperative, Declarative, Object-Oriented, Functional etc
    
    -> NOTE: Python is a multi paradigm Programming Language 

    -> Imperative - How To do a task  (Python, Java, C etc)  

    -> Declarative - What To do (SQL, CSS, Python etc)  

    -> Functional - Everything is functions(Haskell, Lisp, Python etc)

        -> Lambda Expressions, Higher Order Functions etc
    
    -> Object Oriented - Taking real world objects and represent them in programs

    -> Scripting -  A scripting language is a programming language 
        designed to automate tasks (DevOps & Cloud)


    -> 01010000 01111001 01110100 01101000 01101111 01101110 (Low Level)

    
    -> Indentation

        -> { } [ ] ( ) ; Other programming languages

        -> Space 
    
    -> Java Program to add two numbers

        class AddNumbers {
            public static void main(String [] args) {
                public int num1 = 10;
                public int num2 = 20;
                int sum = a+b;
            }
        }
    
    -> Python Program to add two numbers
        
        num1 = 10
        num2 = 20
        sum = a+b
    
    -> Java (Static Typed -- You need to tell before hand what datatype to apply )  
        
        String brandName = "The Indian Garage Co";
        double ratings = 4.2;
        int size = 34;

    -> Python (Dynamic Typed -- You don't need to tell before hand what datatype to apply )
        
        brand_name = "The Indian Garage Co"
        ratings = 4.2
        size = 34

        print(f"Brand is {brand_name}")
        print(f"Ratings are {ratings}")
        
        NOTE: Applied On Object Level
    
    -> Java vs Python

        -> Java is Fast (Compiled Language) 

        -> Python is Slow (Interpreted Language) (Line By Line) 

        -> Java Learning Curve is HIGH (Proto Type - 6 Months)

        -> Python Learning Curve is EASY (Proto Type - 6 Weeks)

17th July
=========

    -> Setup Python Environment

        -> Setup Python Interpreter (Run Python Code)    

        -> IDE (Integrated Development Environment) - VS CODE

        -> Git Bash (Version Controlling) (Tracking Source Code) (Client Software)

        -> Setup GitHub Account (Store Code) (Service Provider)

19th July
=========

    -> Two Modes To Execute Python Code

        -> Script Mode (In real time)

            -> IDE 

        -> Interactive / Command Line Mode

            -> Python Interpreter   

    -> Keywords

        -> predefined reserved word that have special
        meaning to python Interpreter

        -> There are 35 keywords in python

        -> https://docs.python.org/3/reference/lexical_analysis.html#keywords

    -> Variables 

        -> To Store Data  

        -> All the Variables will be stored in memory  

    -> DataTypes

        -> To Store Different types of data we have Different
        DataTypes   
    
    -> Any sort of Variables we create, we have rules

    -> Identifier rules

        -> Can Contain
            -> Letters(A-Z or a-z)
            -> Digits(0-9)
            -> UnderScore(_)
        -> Must Start with
            -> A letter 
            -> UnderScore
        -> Cannot start with digit
        -> Cannot be Python Keyword(imp0rt, class)  
        -> Identifiers are case sensitive(Name, name, NAME)

    -> We can use type() to know what datatype 
    we are working with

    -> We can use id() to know what is the memory address
    of Variables/Data (object)

    -> Output Variables

        -> print()

22nd July
=========

    -> Concatenation - Joining the Strings using + operator

    -> Interpolation - Replacing placeholders with Actual Values

        -> Supports from Python 3 onwards
        -> We use { } with f-strings(string formatted literals)
    
    -> Variables 

        -> To Store Data
        -> To Retrieve Data 
        -> To Manipulate Data (Operators)

    -> Operators

        -> Special Symbols, that perform operations on 
            Variables & Values

        -> Values : Operands
        -> Symbols : Operators

        -> Python has multiple types of Operators

            -> Arithmetic Operators

                -> + - * / % 
                -> // - floor division 
                    (same as division but round off answer to integer)
                -> ** - exponentiation (for power calculations)

            -> Compound Assignment Operators
                -> Assignment Operator is =
                -> Used for concise(short) form of writing Arithmetic operations
                -> x = x + 5 or  x += 5

                -> += -= *= /= %= //= **=

                -> Like in java we have increment / decrement
                    ++ --, this is not supported in python

                -> In python we can use
                    += 1 or -= 1

            -> Comparison / Relational Operators

                -> Used to compare values and determine if 
                    the return value is True / False (boolean)

                -> Primarily used with conditionals  

                -> == (Equal To)   
                -> != (Not Equal To)   
                -> >
                -> <
                -> <=
                -> >=

            -> Logical Operators

                -> Used to combine multiple conditions
                -> Return value is True / False (boolean)

                -> and 
                -> or
                -> not 

                X       Y       X and Y    X or Y    not X    not Y
                T       T           T         T         F       F
                T       F           F         T         F       T
                F       T           F         T         T       F
                F       F           F         F         T       T      


            -> Membership Operators

                -> Used if a sequence is present 

                -> in - returns true if specified input is in given sequence

                -> not in - returns true if specified input is not in given sequence

            -> Identity Operators

                -> Used to compare objects on memory level
                    we use == to compare values

                -> is - returns true if both the objects are same

                -> is not - returns true if both the objects are not same


            -> Bitwise Operators

                -> Used to perform Comparison on BINARY LEVEL(01)

                -> Used in Embedded Systems, Network Programming, OS Level etc

                -> AND(&) - Sets each bit to 1 if both bits are 1
                -> OR (|)- Sets each bit to 1 if one of bits is 1
                -> XOR (^) - Sets each bit to 1 if only one of the bits is 1
                    i.e if both values are different then output is 1, 
                        if both values are same then output is 0 
                -> NOT(~ is tilde) - Invert the bits 
                
                -> << (Left Shift)
                    -> Shift the bits to left, pushing zeros in from
                        the right and let the leftmost bits fall off
                -> >> (Right Shift)
                    -> Shift the bits to right, pushing the left most bits 
                        in from the left, so that rightmost bits fall off


